worker_processes auto;
worker_rlimit_nofile 100000;
error_log /var/log/nginx/error.log crit;
rtmp_auto_push on;


events {   
    worker_connections 768;
    # accept as many connections as possible, may flood worker connections if set too low â€” for testing environment
    multi_accept on;
    use epoll;
}
rtmp {
    server {
        listen 1935;
        ping 30s;
        notify_method get;
        chunk_size 4096;

        # video on demand for flv files
        application vod {
            play /mnt/flvs;
        }

        application vod2 {
            play /mnt/mp4s;
        }

        application live {
            live on;
            allow play all;
            allow publish all;
            on_publish http://localhost:5050/stream_publish;
            on_publish_done http://localhost:5050/stream_done;
            notify_method get;
            # Once receive stream, transcode for adaptive streaming
            # This single ffmpeg command takes the input and transforms
            # the source into 4 different streams with different bitrate
            # and quality. P.S. The scaling done here respects the aspect
            # ratio of the input.
            exec chmod +x /opt/live_app/transcode_script.sh;
            exec_push /opt/live_app/transcode_script.sh $app $name;
            exec_kill_signal term;

	        max_connections 100; # Sets maximum number of connections for rtmp engine. Default=off. 
            push rtmp://localhost:1935/recorder;
        }

        application recorder {
            live on;

            drop_idle_publisher 30s;
            record all;
            record_interval 15m;
            record_path /mnt/recordings;
            record_unique on;
            record_append on;
            record_suffix all-%d-%b-%y-%T.flv;
            exec_record_done ffmpeg -y -i $path -acodec libmp3lame -ar 44100 -ac 1 -vcodec libx264 /mnt/mp4s/$basename.mp4;
        }

        application show {
            live on;

            hls on; # Enable HTTP Live Streaming
            hls_fragment 10s;
            hls_playlist_length 30s;
            hls_sync 100ms;
            drop_idle_publisher 5s;
            meta copy;
            deny play all;
            # Pointing this to an SSD is better as this involves lots of IO
            hls_path /mnt/hls/;
            hls_type live;
            hls_cleanup on;
            # hls_fragment_naming system;
            hls_nested on;
            # Instruct clients to adjust resolution according to bandwidth
            hls_variant _subsd BANDWIDTH=288000 RESOLUTION=426x240;
            hls_variant _sd BANDWIDTH=480000 RESOLUTION=852x480;
            hls_variant _hd BANDWIDTH=1552000 RESOLUTION=1280x720;
            hls_variant _ultra BANDWIDTH=2048000 RESOLUTION=1920x1080;
        
        }

 
    }
}

# This server can be written in any other framework. I've made it here for simplicity

http {
    access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log warn;
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    sendfile off;				# on|off. Toggles the use of sendfile. Default=off. For optimal HLS delivery disable this.
	tcp_nodelay on;				# on|off. Forces a socket to send the data in its buffer, whatever the packet size. Default=on.
	tcp_nopush on;				# on|off. Sends the response header and beginning of a file in one packet. Default=off.
    gzip off;		
	gzip_proxied any;
	gzip_http_version 1.1;

     
	gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;    
    
    server {
        listen 5050;
        location / {
            root /www;
        }

        location /stream/hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                application/octet-stream.ts;
                video/mp2t ts;
                video/x-flv flv;
                video/mp4 mp4;

            }
            root /mnt;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }

        location /stream_publish {
                    # resolver 8.8.8.8 ipv6=off;
                    proxy_buffering off;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_pass         http://jasma-nginx-dev/api/live/publish;
         }
        location /stream_done {
                    # resolver 8.8.8.8 ipv6=off;
                    proxy_buffering off;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_pass         http://jasma-nginx-dev/api/live/done;
         }

    }
}